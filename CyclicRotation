
Task description
A zero-indexed array A consisting of N integers is given. Rotation of the array means that each element is shifted right by one index, and the last element of the array is also moved to the first place.
For example, the rotation of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7]. The goal is to rotate array A K times; that is, each element of A will be shifted to the right by K indexes.

Write a function:
function solution(A, K);
that, given a zero-indexed array A consisting of N integers and an integer K, returns the array A rotated K times.
For example, given array A = [3, 8, 9, 7, 6] and K = 3, the function should return [9, 7, 6, 3, 8].
Assume that:
N and K are integers within the range [0..100];
each element of array A is an integer within the range [âˆ’1,000..1,000].

SOLUTION: 
function solution(A, K) {
   
  //Initialise variables
  var array = [];
  var sizeOfArray = A.length;
  var newIndex;
   
  //Loop through array
  for(var i=0; i < sizeOfArray; i++){
    
    /*
     * If rotating array more than the size of the array
     * Get the remainder/modulus that will fit into the array size 
     * and apply new index to current index plus rotation value K
     */
    if(K > sizeOfArray){
		  K = K % sizeOfArray;
		  newIndex = i + K;
	   }else{
		  newIndex = i + K;
		}
		
		// Handle zero indexed array
		if(newIndex > (sizeOfArray - 1)){
			newIndex = newIndex - sizeOfArray;
		}
			
			//Get the value at current index and insert to new array at new index
			var value = A[i];
		  array.splice(newIndex, 0, value);
		}
		
		return array;
}
