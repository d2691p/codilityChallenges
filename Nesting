A string S consisting of N characters is called properly nested if:

S is empty;
S has the form "(U)" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, string "(()(())())" is properly nested but string "())" isn't.

Write a function:
function solution(S);

that, given a string S consisting of N characters, returns 1 if string S is properly nested and 0 otherwise.
For example, given S = "(()(())())", the function should return 1 and given S = "())", the function should return 0, as explained above.

Assume that:
N is an integer within the range [0..1,000,000];
string S consists only of the characters "(" and/or ")".

Complexity:
expected worst-case time complexity is O(N);
expected worst-case space complexity is O(1) (not counting the storage required for input arguments).

SOLUTION:
function solution(S) {

    var valid = 1;
    var invalid = 0;
    
    var countOpen = (S.match(/\(/g) || []).length;
    var countClose = (S.match(/\)/g) || []).length;
    
    //If they do not match or begins with ')' they must be unbalanced
    if(countOpen != countClose || S.indexOf(')') === 0){
     return invalid;   
    }
    
    var amountOpen = 0;
    var amountClose = 0;

    var strArr = S.split('');
    
    //Loop the array, ensuring there are more '(' than ')' before counting another ')', otherwise error 
    for(var i=0; i<strArr.length; i++){
       
        if(strArr[i] == "("){
            amountOpen++;
        }else if(amountOpen > amountClose){
            amountClose++;
        }else{
            return invalid;
        }
    }
    //If not invalid before, must be valid
    return valid;
}
