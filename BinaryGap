A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.

For example, number 9 has binary representation 1001 and contains a binary gap of length 2. The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3. The number 20 has binary representation 10100 and contains one binary gap of length 1. The number 15 has binary representation 1111 and has no binary gaps.

Write a function:
function solution(N);
That, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn't contain a binary gap.
For example, given N = 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5.

Assume that:
N is an integer within the range [1..2,147,483,647].

SOLUTION:
function solution(N) {
    
    //Get binary representation of N
    var binaryN = parseInt(N,10).toString(2);
    var count = 0;
    var max = 0;
    var array =[];

    //If binaryN has consecutive 0's, process, else return 0
     if(binaryN.indexOf("00") != -1){

        //Add each binary value to an array  
        array = binaryN.split(""); 	
          
        //Loop array
        for(var i = 0; i < array.length; i++){
        		
          //Get the current value at index (0 or 1)
        	var currentInt = array[i];
        	
        	//Handle out of array bounds exception
        	if(i != array.length - 1){
	          var nextInt = array[i+1];
	        		
	        	//If current is a 0 and the next value is also a 0, increase count of binary gap
	        	if(currentInt < 1 && nextInt < 1){
	        		count = count + 1;
	        	}else if(currentInt < 1 && nextInt == 1){
	        		//Add the final 0
	        		count = count + 1;
	        			
	        	//Evaluate if the current count is greater than the max count received
	        	if(count > max){
	       			max = count;
	       		}
	       		
	        	}else{
	        	  //Reset count to 0
	        		count=0;
	        	}
        	}
        }
      }
        
      return max;
}
